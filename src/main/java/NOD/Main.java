package NOD;

import java.util.Arrays;

/**
 * Наибольший общий делитель. НОД.
 * <p/>
 * Для нахождения общего делителя вам нужно знать следующее:
 * <p/>
 * Запомните: наибольший общий делитель (НОД) двух целых чисел – это наибольшее целое число,
 * на которое делятся оба исходных числа без остатка.
 * Однако одно из исходных чисел должно быть большее нуля.
 * Запомните: если у вас одно из двух чисел ноль, то НОД будет, то число что больше ноля.
 * Запомните: существует понятие взаимно-простых чисел,
 * у которого нет общих делителей, кроме единицы.
 * К примеру число 5 и 4, НОД этих чисел будет равен 1, так как если 5 разделить
 * на 4 вы не получите целое число без остатка, следовательно НОД=1
 * <p/>
 * Блок-схема «Алгоритм Евклида»
 */

public class Main {
    public static void main(String[] args) {
        System.out.println(nod(30, -15, 45, 60));
    }

    //Two numbers
    static int nod_numbers(int a, int b) {
        if (b == 0)
            return Math.abs(a);
        return nod_numbers(b, a % b);
    }

    //List numbers

    /**
     * Разберем по подробнее работу программы блок схемы из рис. 4.
     * <p/>
     * У нас подается 3 числа, но их может быть сколько угодно.
     * Их мы записываем в массив array.
     * Выполняем метод sort(); Это мой метод он принимает массив чисел,
     * делает сортировку по убыванию, пузырьковым методом, о нем вы можете прочитать из уроков о массивах.
     * Выполняем метод nod(), который принимает первые два числа.
     * Я создал метод по аналогии как описано выше, в этой статье.
     * В следующем блоке я помещаю в тело цикла метод nod(),
     * который присваиваю возвращаемое число из метода nod() переменной a.
     * Выводим результат.
     * Завершаем работу программы.
     */
    static int nod(int a, int... num) {
        Arrays.sort(num);
        for (int i = 1; i < num.length; i++) {
            return nod_numbers(num[i - 1], num[i]);
        }
        return a;
    }

}
